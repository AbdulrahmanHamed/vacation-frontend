/**
 * HR Tool
 * HR Tool
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

 import { Inject, Injectable, Optional }                      from '@angular/core';
 import { HttpClient, HttpHeaders, HttpParams,
          HttpResponse, HttpEvent }                           from '@angular/common/http';
 import { CustomHttpUrlEncodingCodec }                        from '../encoder';
 
 import { Observable }                                        from 'rxjs';
 
 import { Balance } from '../model/balance';
 import { Vacation } from '../model/vacation';
 
 import { BASE_PATH, COLLECTION_FORMATS }                     from "../variables";
 import { Configuration }                                     from '../configuration';

@Injectable({
  providedIn: 'root'
})
export class VacationsService {

  protected basePath = 'http://localhost:8085';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Create employee vacation
     * @param id Employee identifier
     * @param vacationType 
     * @param start 
     * @param end 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createEmployeeVacation(id: number, vacationType: string, start: string, end: string, observe?: 'body', reportProgress?: boolean): Observable<Balance>;
    public createEmployeeVacation(id: number, vacationType: string, start: string, end: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Balance>>;
    public createEmployeeVacation(id: number, vacationType: string, start: string, end: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Balance>>;
    public createEmployeeVacation(id: number, vacationType: string, start: string, end: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling createEmployeeVacation.');
        }

        if (vacationType === null || vacationType === undefined) {
            throw new Error('Required parameter vacationType was null or undefined when calling createEmployeeVacation.');
        }

        if (start === null || start === undefined) {
            throw new Error('Required parameter start was null or undefined when calling createEmployeeVacation.');
        }

        if (end === null || end === undefined) {
            throw new Error('Required parameter end was null or undefined when calling createEmployeeVacation.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (vacationType !== undefined && vacationType !== null) {
            queryParameters = queryParameters.set('vacationType', <any>vacationType);
        }
        if (start !== undefined && start !== null) {
            queryParameters = queryParameters.set('start', <any>start);
        }
        if (end !== undefined && end !== null) {
            queryParameters = queryParameters.set('end', <any>end);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Balance>('post',`${this.basePath}/employee/${encodeURIComponent(String(id))}/vacations`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get employee vacations balance
     * @param id Employee identifier
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEmployeeVacationsBalance(id: number, observe?: 'body', reportProgress?: boolean): Observable<Balance>;
    public getEmployeeVacationsBalance(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Balance>>;
    public getEmployeeVacationsBalance(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Balance>>;
    public getEmployeeVacationsBalance(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getEmployeeVacationsBalance.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Balance>('get',`${this.basePath}/employee/${encodeURIComponent(String(id))}/vacations/balance`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get vacation types
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVacationTypes(observe?: 'body', reportProgress?: boolean): Observable<Vacation>;
    public getVacationTypes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Vacation>>;
    public getVacationTypes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Vacation>>;
    public getVacationTypes(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Vacation>('get',`${this.basePath}/vacation`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
}
